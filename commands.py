from aiogram import Router, types
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from spotify import find_artist_by_name
from fan_management import add_favorites, remove_favorite, load_fans_data, clear_news_for_user
from spotify import sp, get_artist_info
from artists import artist_keyboard


router = Router()

def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="üéµ –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤"),
        types.KeyboardButton(text="üéôÔ∏è –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"),
    )
    builder.row(types.KeyboardButton(text="üìÜ –ù–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã"))
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)

@router.message(Command("remove"))
async def remove_favorite_handler(message: types.Message):
    artist_names = message.text.replace("/remove", "").strip().split(",")
    user_id = str(message.from_user.id)
    
    removed_artists = []
    for name in artist_names:
        name = name.strip()
        artist_id = await find_artist_by_name(name)
        if artist_id and remove_favorite(user_id, artist_id):
            removed_artists.append(name)
    
    if removed_artists:
        await message.answer(f"üíî –£–¥–∞–ª–µ–Ω—ã: {', '.join(removed_artists)}")
    else:
        await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ ‚Äî –∞—Ä—Ç–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö")

@router.message(Command("myfavorites"))
async def show_favorites(message: types.Message):
    user_id = str(message.from_user.id)
    news = load_fans_data()
    
    if user_id not in news or not news[user_id]:
        await message.answer("üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤")
        return
    
    artist_ids = news[user_id]
    artists = []
    
    for artist_id in artist_ids:
        try:
            artist = await get_artist_info(artist_id)
            artists.append(artist)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–∞ {artist_id}: {e}")
    
    if not artists:
        await message.answer("‚ùå –ê—Ä—Ç–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    await message.answer(
        "üÜï –ê—Ä—Ç–∏—Å—Ç—ã —Å–æ —Å–≤–µ–∂–∏–º–∏ —Ä–µ–ª–∏–∑–∞–º–∏:",
        reply_markup=artist_keyboard(artists)
    )
    
    # –û—á–∏—Å—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    clear_news_for_user(user_id)

@router.message(Command("favorites"))
async def add_favorites_handler(message: types.Message):
    artist_names = message.text.replace("/favorites", "").strip().split(",")
    user_id = str(message.from_user.id)
    
    added_artists = []
    for name in artist_names:
        name = name.strip()
        artist_id = await find_artist_by_name(name)
        if artist_id:
            added_artists.append(name)
            add_favorites(user_id, [artist_id])
    
    if added_artists:
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã: {', '.join(added_artists)}")
    else:
        await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")

@router.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())