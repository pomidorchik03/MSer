from aiogram import Router, types
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from spotify import find_artist_by_name
from fan_management import add_favorites, remove_favorite, load_fans_data, clear_news_for_user
from spotify import sp, get_artist_info
from artists import artist_keyboard
from config import CHANELL_TOKEN

router = Router()

def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="üéµ –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤"),
        types.KeyboardButton(text="üéôÔ∏è –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
    )
    builder.row(
        types.KeyboardButton(text="üìÜ –ù–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã"),
        types.KeyboardButton(text="‚ùì –°–ø—Ä–∞–≤–∫–∞")
    )
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)

@router.message(Command("remove"))
async def remove_favorite_handler(message: types.Message):
    artist_names = message.text.replace("/remove", "").strip().split(",")
    user_id = str(message.from_user.id)
    
    removed_artists = []
    for name in artist_names:
        name = name.strip()
        artist_id = await find_artist_by_name(name)
        if artist_id and remove_favorite(user_id, artist_id):
            removed_artists.append(name)
    
    if removed_artists:
        await message.answer(f"üíî –£–¥–∞–ª–µ–Ω—ã: {', '.join(removed_artists)}")
    else:
        await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ ‚Äî –∞—Ä—Ç–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö")

@router.message(Command("myfavorites"))
async def show_favorites(message: types.Message):
    user_id = str(message.from_user.id)
    news = load_fans_data()
    
    if user_id not in news or not news[user_id]:
        await message.answer("üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤")
        return
    
    artist_ids = news[user_id]
    artists = []
    
    for artist_id in artist_ids:
        try:
            artist = await get_artist_info(artist_id)
            artists.append(artist)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–∞ {artist_id}: {e}")
    
    if not artists:
        await message.answer("‚ùå –ê—Ä—Ç–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    await message.answer(
        "üÜï –ê—Ä—Ç–∏—Å—Ç—ã —Å–æ —Å–≤–µ–∂–∏–º–∏ —Ä–µ–ª–∏–∑–∞–º–∏:",
        reply_markup=artist_keyboard(artists)
    )
    
    # –û—á–∏—Å—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    clear_news_for_user(user_id)

@router.message(Command("favorites"))
async def add_favorites_handler(message: types.Message):
    artist_names = message.text.replace("/favorites", "").strip().split(",")
    user_id = str(message.from_user.id)
    
    added_artists = []
    for name in artist_names:
        name = name.strip()
        artist_id = await find_artist_by_name(name)
        if artist_id:
            add_favorites(user_id, [artist_id])
            added_artists.append(name)
            
    
    if added_artists:
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã: {', '.join(added_artists)}")
    else:
        await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        
@router.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üéµ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/favorites [–∞—Ä—Ç–∏—Å—Ç 1, –∞—Ä—Ç–∏—Å—Ç 2] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ª—é–±–∏–º—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤\n"
        "/myfavorites ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤\n"
        "/remove [–∞—Ä—Ç–∏—Å—Ç 1, –∞—Ä—Ç–∏—Å—Ç 2] ‚Äî —É–¥–∞–ª–∏—Ç—å –∞—Ä—Ç–∏—Å—Ç–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã\n\n"
        "–ö–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –ø–æ–∑–≤–æ–ª—è—é—Ç:\n"
        "üéµ –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤\n"
        "üéôÔ∏è –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π\n"
        "üìÜ –ù–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã ‚Äî —Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Ç–∏—Å—Ç–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –∞–ª—å–±–æ–º–∞–º–∏\n"
        "‚ùì –°–ø—Ä–∞–≤–∫–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n",
        reply_markup=get_main_keyboard()
    )        

@router.message(Command("help"))
async def show_help(message: types.Message):
    await message.answer(
        "üìö –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/favorites [–∞—Ä—Ç–∏—Å—Ç 1, –∞—Ä—Ç–∏—Å—Ç 2] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–∏—Å—Ç–æ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n"
        "/myfavorites ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏—Ö –ª—é–±–∏–º—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤\n"
        "/remove [–∞—Ä—Ç–∏—Å—Ç 1, –∞—Ä—Ç–∏—Å—Ç 2] ‚Äî —É–¥–∞–ª–∏—Ç—å –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ö–Ω–æ–ø–∫–∏:\n"
        "üéµ –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ ‚Äî –∏—â–µ—Ç –ø–µ—Å–Ω–∏\n"
        "üéôÔ∏è –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π ‚Äî –∏—â–µ—Ç –∞—Ä—Ç–∏—Å—Ç–æ–≤\n"
        "üìÜ –ù–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞—Ä—Ç–∏—Å—Ç–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –∞–ª—å–±–æ–º–∞–º–∏\n"
        "‚ùì –°–ø—Ä–∞–≤–∫–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )
    
@router.message(lambda m: m.text == "‚ùì –°–ø—Ä–∞–≤–∫–∞")
async def show_help_button(message: types.Message):
    await show_help(message)
    
LAST_CHANNEL_POST = None

@router.channel_post()
async def handle_channel_post(post: types.Message):
    global LAST_CHANNEL_POST
    LAST_CHANNEL_POST = post

@router.message(lambda m: m.text == "üìÜ –ù–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã")
async def show_latest_release(message: types.Message):
    global LAST_CHANNEL_POST
    try:
        if LAST_CHANNEL_POST:
            await LAST_CHANNEL_POST.copy_to(chat_id=message.chat.id)
        else:
            await message.answer("‚ùå –ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")