from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import TELEGRAM_TOKEN
import asyncio
from track import track_search, convert_ms_to_time
from keyboards import tracks_keyboard, info_type_keyboard
from spotipy import Spotify
from spotify_client import sp 
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from genius_client import *

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class TrackSearch(StatesGroup):
    waiting_query = State()
    waiting_track_choice = State()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(Command("start"))
async def start(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="üéµ –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤"),
        types.KeyboardButton(text="üéôÔ∏è –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
    )
    builder.row(types.KeyboardButton(text="üìÜ –ù–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã"))
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤"
@dp.message(F.text == "üéµ –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤")
async def search_tracks_handler(message: types.Message, state: FSMContext):
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞:")
    await state.set_state(TrackSearch.waiting_query)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞
@dp.message(TrackSearch.waiting_query)
async def process_track_query(message: types.Message, state: FSMContext):
    try:
        # –ò—â–µ–º —Ç—Ä–µ–∫–∏
        tracks = await track_search(message.text)
        
        if not tracks:
            await message.answer("üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await state.clear()
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        await message.answer(
            "üéß –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏:",
            reply_markup=tracks_keyboard(tracks).as_markup()
        )
        await state.set_state(TrackSearch.waiting_track_choice)
        await state.update_data(tracks=tracks)

    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–∫–∞
@dp.callback_query(F.data.startswith("track_"), TrackSearch.waiting_track_choice)
async def process_track_choice(callback: types.CallbackQuery, state: FSMContext):
    track_id = callback.data.split("_")[1]
    await callback.message.answer(
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=info_type_keyboard(track_id).as_markup()
    )
    await callback.answer()
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ
@dp.callback_query(F.data.startswith("info_"))
async def show_track_info(callback: types.CallbackQuery):
    track_id = callback.data.split("_")[1]
    track = sp.track(track_id)
    
    text = (
        f"üéµ {track['name']}\n"
        f"üë®üé§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {', '.join([a['name'] for a in track['artists']])}\n"
        f"üíΩ –ê–ª—å–±–æ–º: {track['album']['name']}\n"
        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {convert_ms_to_time(track["duration_ms"])}"
    )
    
    await callback.message.answer(text)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏
@dp.callback_query(F.data.startswith("lyrics_"))
async def show_lyrics(callback: types.CallbackQuery):
    track_id = callback.data.split("_")[1]
    track = sp.track(track_id)
    
    try:
        name = track['name']
        artist_name = track['artists'][0]['name'] if track['artists'] else "Unknown"
        
        song = genius.search_song(name, artist_name)
        if not song or not song.lyrics:
            return await callback.message.answer("üòï –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        lyrics = song.lyrics.split('[', 1)
        cleaned_lyrics = ('[' + lyrics[1] if len(lyrics) > 1 else lyrics[0]).strip()
        
        await callback.message.answer(
            f"üìù {name}:\n\n{cleaned_lyrics[:3000]}...",
            parse_mode="HTML"
        )
        
    except:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞")    
    await callback.answer()

async def main():
    await dp.start_polling(bot)
    print("–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())