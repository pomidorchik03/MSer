from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from spotify import get_track_info, get_artist_info, get_artist_albums, get_album_tracks
from genius import get_lyrics_safe
from tracks_list import info_type_keyboard
from artists import albums_keyboard, album_tracks_keyboard
from helpers import convert_ms_to_time
from background import check_for_new_releases
from fan_management import remove_favorite
from commands import show_help


router = Router()



@router.callback_query(lambda c: c.data.startswith("track_"))
async def process_track_choice(callback: types.CallbackQuery, state: FSMContext):
    '''–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ç–µ–∫—Å—Ç–æ–º'''
    track_id = callback.data.split("_")[-1]
    await callback.message.answer(
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=info_type_keyboard(track_id).as_markup(),
    )
    await callback.answer()
    await state.clear()

@router.callback_query(lambda c: c.data.startswith("info_"))
async def show_track_info(callback: types.CallbackQuery):
    '''–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ'''
    track_id = callback.data.split("_")[1]
    track = await get_track_info(track_id)

    text = f"""
            üéµ {track['name']}
            üë®üé§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {', '.join([a['name'] for a in track['artists']])}
            üíΩ –ê–ª—å–±–æ–º: {track['album']['name']}
            ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {convert_ms_to_time(track['duration_ms'])}
            """
    await callback.message.answer(text)
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("lyrics_"))
async def show_lyrics(callback: types.CallbackQuery):
    '''–¢–µ–∫—Å—Ç —Ç—Ä–µ–∫–∞'''
    track_id = callback.data.split("_")[1]
    track = await get_track_info(track_id)

    try:
        name = track["name"]
        artist_name = track["artists"][0]["name"] if track["artists"] else "Unknown"

        lyrics = get_lyrics_safe(name, artist_name)
    
        if not lyrics:
            return await callback.message.answer("üòï –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        await callback.message.answer(
            f"üìù {name}:\n\n{lyrics[:3000]}", parse_mode="HTML"
        )
    except Exception as e:
        print(e)
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞")
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("artist_"))
async def show_artist_info(callback: types.CallbackQuery):
    '''–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞—Ä—Ç–∏—Å—Ç–µ'''
    artist_id = callback.data.split("_")[1]
    artist = await get_artist_info(artist_id)

    text = (
        f"üé§ {artist['name']}\n"
        f"üé≠ –ñ–∞–Ω—Ä—ã: {', '.join(artist.get('genres', ['–Ω–µ —É–∫–∞–∑–∞–Ω—ã']))}\n"
        f"üìà –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å: {artist['popularity']}/100\n"
        f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {artist['followers']['total']:,}"
    )
    await callback.message.answer(text)

    albums = await get_artist_albums(artist_id)
    if albums and albums['items']:
        await callback.message.answer(
            "üíø –ê–ª—å–±–æ–º—ã:",
            reply_markup=albums_keyboard(albums['items'])
        )
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("album_"))
async def show_album_tracks(callback: types.CallbackQuery):
    '''–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞'''
    album_id = callback.data.split("_")[1]
    album_tracks = await get_album_tracks(album_id)

    if not album_tracks or not album_tracks['items']:
        await callback.message.answer("‚ö†Ô∏è –ê–ª—å–±–æ–º –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç—Ä–µ–∫–æ–≤")
        return await callback.answer()

    await callback.message.answer(
        "üéß –¢—Ä–µ–∫–∏ –∞–ª—å–±–æ–º–∞:",
        reply_markup=album_tracks_keyboard(album_tracks['items'])
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "check_releases")
async def manual_check(callback: types.CallbackQuery):
    await callback.message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞...")
    await check_for_new_releases(callback.bot)
    await callback.answer()
    
@router.callback_query(lambda c: c.data.startswith("remove_"))
async def remove_favorite_callback(callback: types.CallbackQuery):
    '''–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏'''
    artist_id = callback.data.split("_")[1]
    user_id = str(callback.from_user.id)
    
    if remove_favorite(user_id, artist_id):
        await callback.message.answer("üíî –ê—Ä—Ç–∏—Å—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
    else:
        await callback.message.answer("‚ùå –ê—Ä—Ç–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
    
    await callback.answer()
    
@router.callback_query(lambda c: c.data == "show_help")
async def show_help_callback(callback: types.CallbackQuery):
    '''–ü–æ–¥—Å–∫–∞–∑–∫–∞'''
    await show_help(callback.message)
    await callback.answer()