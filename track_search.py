from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from states import TrackSearch
from spotify import track_search as search_tracks
from tracks_list import tracks_keyboard

router = Router()

@router.message(lambda m: m.text == "üéµ –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤")
async def search_tracks_handler(message: types.Message, state: FSMContext):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ (üéµ –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤)'''
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –æ—Ç—Ä—ã–≤–æ–∫ —ç—Ç–æ–≥–æ —Ç—Ä–µ–∫–∞:")
    await state.set_state(TrackSearch.waiting_query)

@router.message(TrackSearch.waiting_query)
async def process_track_query(message: types.Message, state: FSMContext):
    '''–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'''
    tracks = await search_tracks(message.text)
    
    if not tracks:
        await message.answer("üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return await state.clear()

    await message.answer(
        "üéß –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏:",
        reply_markup=tracks_keyboard(tracks).as_markup()
    )
    await state.update_data(tracks=tracks)
    await state.set_state(TrackSearch.waiting_track_choice)
